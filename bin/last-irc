#!/usr/bin/env python3
"""Look for last mention of string in irc logs"""
import sys
from argparse import ArgumentParser
from argparse import Namespace
from typing import Optional
from datetime import datetime, timedelta

from binmodules.last_irc import (
    IRC_LOG,
    IRC_CHANNELS,
    Date,
    parse_logs,
    get_log,
)


def parse_args() -> Namespace:
    parser: ArgumentParser = ArgumentParser(
        prog='last-irc',
        description=("Get's the last mention of a string from "
                     "Ubuntu IRC logs"
                     ),

    )

    parser.add_argument(
        'query',
        type=str,
        nargs="*",
        help="keyword(s) to search for",
        default=["cpete"],
    )
    parser.add_argument(
        '-c',
        '--channel',
        action='append',
        dest='channels',
        type=str,
        help=("Channels to search. "
               "Repeat to add more channels. "
               "Default is all"
              ),
    )
    parser.add_argument(
        '-u',
        '--utc',
        action='store_true',
        help="Treat inputs as UTC times",
    )

    parser.add_argument(
        '--no-color',
        action='store_true',
        default=False,
        help="No highlight color",
    )

    args: Namespace = parser.parse_args()
    if args.channels is None:
        args.channels = IRC_CHANNELS

    return args


def progressively_backwards(queries: list[str], start: Optional[Date] = None):
    if start is None:
        date: Date = Date.now()
    else:
        date: Date = start

    result: list[str] = []

    while result == []:
        logs = [get_log(channel, date) for channel in args.channels]
        result = parse_logs(queries, logs)
        date = date - timedelta(days=1)

    print(result)


def main(args: Namespace) -> int:
    # today: Date = Date.now()
    # log = get_log(channel=IRC_CHANNELS[0], date=today)
    # print(log)
    progressively_backwards(args.query)

    return 0


if __name__ == "__main__":
    args: Namespace = parse_args()
    print(args)
    sys.exit(main(args))


def test_parse_logs():
    assert True
